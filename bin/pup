#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Puppet-Diamond (c) Ian Dennis Miller

import click
from puppet_diamond import PuppetDiamond

pd = PuppetDiamond()


@click.group()
@click.option('--config', help='configuration file to use.')
@click.option('--skel', help='name of skel to apply (for scaffold).')
@click.pass_context
def cli(ctx, skel, config):
    ctx.obj['skel'] = skel
    ctx.obj['config'] = config


@cli.command('init', short_help='create a fresh puppet master configuration')
def init():
    pd.init_folders()


@cli.command('list', short_help='list available skels.')
def list_skels():
    pd.list_skels()


@cli.command('dryrun', short_help='perform dry run on host (make no changes)')
def dryrun():
    pd.dryrun()


@cli.command('apply', short_help='apply configuration to host')
def apply():
    pd.apply()


@cli.command('certs', short_help='create puppet certs on PuppetMaster and retrieve them')
def certs():
    pd.certs()


@cli.command('scaffold', short_help='create an empty file')
@click.pass_context
def scaffold(ctx):
    pd.create_from_template()


@cli.command('clone', short_help='clone a puppet master (recursively)')
def clone():
    pd.clone()


@cli.command('version', short_help='show version')
def version():
    from puppet_diamond.__meta__ import __version__
    print(__version__)


if __name__ == '__main__':
    cli(obj={})
